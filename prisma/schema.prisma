// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    image         String?
    submissions   Submission[]
    Tasks         Tasks[]
}

model TestCase {
    id             String           @id @default(cuid())
    input          String
    output         String?
    Tasks          Tasks?           @relation(fields: [tasksId], references: [id])
    tasksId        String?
    testCaseResult TestCaseResult[]
}

model TestCaseResult {
    id           String     @id @default(cuid())
    output       String
    submission   Submission @relation(fields: [submissionId], references: [id])
    submissionId String
    testCase     TestCase   @relation(fields: [testCaseId], references: [id])
    testCaseId   String
}

model Submission {
    id             String           @id @default(cuid())
    code           String
    user           User             @relation(fields: [userId], references: [id])
    userId         String
    TestCaseResult TestCaseResult[]
}

model Tasks {
    id        String     @id @default(cuid())
    statement String
    code      String
    testCase  TestCase[]
    owner     User       @relation(fields: [ownerId], references: [id])
    ownerId   String
}

model Admin {
    id String @id @default(cuid())
    email String @unique
}
